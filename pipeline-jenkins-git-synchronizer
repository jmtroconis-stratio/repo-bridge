import groovy.json.JsonSlurper

def authCookie
def dcosUrl = "https://admin-eos.dev.onetrade.corp"
def jobId = "git-synchronizer"
def runId

def notifyError(message){
    currentBuild.result = 'FAILURE'
	step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: 'jmtroconis@stratio.com,carlosagudo@stratio.com'])
    error "$message"
}

node('maven') {
    stage ("Login to DC/OS") {
        try {
            withCredentials([[$class : 'UsernamePasswordMultiBinding',
                              credentialsId   : "cert-cctCredentials-id",
                              usernameVariable: 'CICDCD_SSO_USER_ID',
                              passwordVariable: 'CICDCD_SSO_USER_PASSWORD']]) {
                                  
                withEnv(["CICDCD_SSO_URL=${dcosUrl}/login"]) {
                    configFileProvider([configFile(fileId: 'sso_login', variable: 'SSO_LOGIN_FILE')]) {
                        authCookie = sh script: "bash '${SSO_LOGIN_FILE}'", returnStdout: true
                    }
                }
            }
        } catch (Exception e){
            notifyError("[ERROR] Could not authenticate to $dcosUrl. Failed auth: ${e}")
        }

        if (!authCookie){
            notifyError("[ERROR] Could not authenticate to $dcosUrl. No auth cookie.")
        }
    }
    
    stage ("Run DC/OS job") {
        try {
            def jobCommand = "#!/usr/bin/env bash\n# set -x\ncurl -k -s -X POST --cookie '$authCookie' $dcosUrl/service/metronome/v1/jobs/${jobId}/runs"
            def jobResponse = sh script: "$jobCommand", returnStdout: true
            def jobResponseJson = new JsonSlurper().parseText(jobResponse)
            runId = jobResponseJson.id
            println "[INFO] Running DC/OS job with jobId '$jobId' and runId '$runId'"
        } catch (Exception e){
            notifyError("[ERROR] Could not be executed the DC/OS job $jobId")
        }
        
        if (!runId){
            notifyError("[ERROR] DC/OS job $jobId didn't start correctly. No run id.")
        }
    }
    
    stage ("Check DC/OS job status") {
        def jobFinished = false

        while (!jobFinished){
            def jobPollCommand = "#!/usr/bin/env bash\n# set -x\ncurl -k -s --cookie '$authCookie' $dcosUrl/service/metronome/v1/jobs/${jobId}?embed=history"
            def jobStatusResult = sh script: "$jobPollCommand", returnStdout: true
            def jobStatusResponseJson = readJSON text: "$jobStatusResult"

            if (jobStatusResponseJson.history.failedFinishedRuns.any{ it.id == "$runId" }){
                notifyError("[ERROR] DC/OS job finished with failed status")
            } else if (jobStatusResponseJson.history.successfulFinishedRuns.any{ it.id == "$runId" }){
                jobFinished = true
                println "[INFO] DC/OS job finished with successful status"
            } else {
                println "[INFO] DC/OS job still running"
                sleep 5
            }
        }
    }
}
