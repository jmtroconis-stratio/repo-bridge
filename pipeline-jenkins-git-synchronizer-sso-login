#!/usr/bin/env bash 

[[ $DEBUG == true ]] && set -x || set +x

# set -o nounset
# set -o errexit

############## Dependency checking
DEPENDENCIES_CHECK() { 
    for program in "$@" ; do
        type "${program}" >/dev/null 2>&1 || {
            echo >&2 "I require ${program} but it's not installed.  Aborting."
            exit 1
        }
    done
}
DEPENDENCIES_CHECK "curl" "getopt" "awk"

############## Login
# 
# login
#     INPUTS:
#           1: URL DCOS
#           2: User_id with permission to execute CCT API
#           3: User Password
#     OUTPUTS:
#          populate COOKIE_DCOS_ACS_AUTH COOKIE_DCOS_ACS_INFO
#     EXAMPLE
#       . ./sso_login.sh &&  login_CCT <SSO_login_URL> <USER> <PASS> && echo "dcos-acs-auth-cookie=${COOKIE_DCOS_ACS_AUTH};dcos-acs-info-cookie=${COOKIE_DCOS_ACS_INFO};"
#
login_CCT() {
    local url_dcos
    local user_id
    local user_password
    local tenant
    local raw_cookies
    local response
    local status_code
    local url_login_submit
    local cookie_dcos_acs_auth
    local cookie_dcos_acs_info
    local input_lt
    local input_execution
    local curl_opts=" --connect-timeout 5 --retry 5 --retry-delay 2 --tlsv1.2 -k"
#    local curl_opts=" --connect-timeout 5 --retry 5 --retry-delay 2 --tlsv1.2 -k$( [[ "${DEBUG}" == true ]] && echo " -vvv" )"
    local old_ifs
    local cookiesFirstLogin="$(mktemp -p /dev/shm)"

    local HELP_TEXT="  Retreive SSO cookies from platform
        USAGE:
            CICDCD_SSO_URL              Envirenment variable with the url of login screen
            CICDCD_SSO_USER_ID          Envirenment variable with sso User
            CICDCD_SSO_USER_PASSWORD    Envirenment variable with sso User plataform
            CICDCD_SSO_TENANT           Envirenment variable with ID of tenant, NONE by defect
            --rawcookies                to write raw cookies to console

    "

    local options=$(getopt \
        --options h\? \
        --long rawcookies,help \
        -- "$@")

    if [[ ${#@} -ne 0 ]] && [[ ${@#"--help"} = "" ]]; then
        printf -- "%s" "${HELP_TEXT}"
        exit 0
    fi

    set -- ${options}

    local position_index_argument=0

    while [[ $# -gt 0 ]] ; do
        case $1 in
            --rawcookies)   
                raw_cookies=true
            ;;
            -h|--help|-\?)  printf -- "%s" "${HELP_TEXT}" ; exit 0 ;;
            (--)            ;;
            (-*)            printf "%s: error - unrecognized option %s" "$0" "$1" 1>&2 ; exit 1 ;;
            (*) 
                position_index_argument=$((position_index_argument+1)) 
                case ${position_index_argument} in
                    1)      url_dcos=${1:1:-1} ;;
                    2)      user_id=${1:1:-1} ;;
                    3)      user_password=${1:1:-1} ;;
                    4)      tenant=${1:1:-1} ;;
                    (*)     printf "%s: error - unrecognized option %s" "$0" "$1" 1>&2 ; exit 1 ;;
                esac
            ;;
        esac
        shift
    done

    [[ -z ${url_dcos:-} ]] && [[ -n ${CICDCD_SSO_URL} ]] && url_dcos=${url_dcos:-$CICDCD_SSO_URL}
    [[ -z ${user_id:-} ]] && [[ -n ${CICDCD_SSO_USER_ID} ]] && user_id=${user_id:-$CICDCD_SSO_USER_ID}
    [[ -z ${user_password:-} ]] && [[ -n ${CICDCD_SSO_USER_PASSWORD} ]] && user_password=${user_password:-$CICDCD_SSO_USER_PASSWORD}
    tenant=${tenant:-${CICDCD_SSO_TENANT:-NONE}}
    raw_cookies=${raw_cookies:-false}

##    declare -F INFO && INFO "url_dcos ${url_dcos} ${user_id} ${user_password} ${tenant} ${raw_cookies}"
    old_ifs=$IFS
    ############## Recuperación de los datos de conexión
    response=$( curl $curl_opts -L \
        -w "%{response_code} %{url_effective}" \
        -c "${cookiesFirstLogin}" \
        --silent \
        $url_dcos)

        IFS=' ' read input_lt input_execution <<< $( 
            echo "${response}" | 
                awk -v RS='<input ' -v FS='"' -v ORS=' ' '
                    /"execution"/ { for(i=1;i<=NF;i++) if($i ~ /value/) execution=$(i+1) }
                    /"lt"/ { for(i=1;i<=NF;i++) if($i ~ /value/) lt=$(i+1) }
                    END { print lt, execution }
                ')

    IFS=' ' read status_code url_login_submit <<< $( echo "${response}" | tail -1)

    case ${status_code} in
        2*|3*)

        ;;
        4*|5*)
            declare -F ERROR && ERROR "login - error 1 while log in DCOS http_code: ${status_code}" || 
                printf "login - error while log in DCOS http_code: %s\n" "${status_code}"
            return 1
        ;;
        *)
            declare -F ERROR && ERROR "Invalid login endpoint ${url_dcos}. The endpoint is invalid or is unavailable." || 
                printf "Invalid login endpoint %s. The endpoint is invalid or is unavailable.\n" "${url_dcos}"
            return 1
    esac

    ############## Login
    response=$( curl $curl_opts \
        -L \
        -w "%{response_code} %{url_effective}" \
        -b "${cookiesFirstLogin}" \
        -D - \
        --silent \
        --output /dev/null \
        --data _eventId=submit \
        --data tenant="$tenant" \
        --data username="$user_id" \
        --data password="$user_password" \
        --data lt="$input_lt" \
        --data-urlencode execution="${input_execution}" \
        --compressed --insecure \
        ${url_login_submit} )

    IFS=' ' read status_code url_login_submit <<< $( echo "${response}" | tail -1)

    case ${status_code} in
        200|201|202)
            IFS=' ' read cookie_dcos_acs_auth cookie_dcos_acs_info <<< $(
                    echo "${response}" | 
                    awk '
                        /^[sS]et-[cC]ookie:/ && /dcos-acs-auth-cookie=/ { auth=$2; next}
                        /^[sS]et-[cC]ookie:/ && /dcos-acs-info-cookie=/ { info=$2; next}
                        END{print auth, info} 
                    ')
        ;;
        4*|5*)
            declare -F ERROR && ERROR "login - error 1 while log in SSO http_code: ${status_code}" || 
                printf "login - error 1 while log in SSO http_code: %s\n" "${status_code}"
            IFS=$old_ifs
            return 1
        ;;
        *)
            declare -F ERROR && ERROR "Invalid login endpoint. The endpoint is invalid or is unavailable." || 
                printf "Invalid login endpoint. The endpoint is invalid or is unavailable. \n"
            IFS=$old_ifs
            return 1
    esac

    if [[ -z $cookie_dcos_acs_auth ]] || [[ -z $cookie_dcos_acs_info ]] ; then
        declare -F ERROR && ERROR "Login failed for user ${user_id}. Verify passwaord." || 
            printf "Login failed for user %s. Verify password.\n" "${user_id}"
        IFS=$old_ifs
        return 1
    fi

    if [[ "${raw_cookies}" == true ]] ; then
        echo "${cookie_dcos_acs_auth}${cookie_dcos_acs_info}"
    fi

    cookie_dcos_acs_auth="${cookie_dcos_acs_auth##dcos-acs-auth-cookie=}"
    cookie_dcos_acs_info="${cookie_dcos_acs_info##dcos-acs-info-cookie=}"

    export COOKIE_DCOS_ACS_AUTH="${cookie_dcos_acs_auth%?}"
    export COOKIE_DCOS_ACS_INFO="${cookie_dcos_acs_info%?}"

    IFS="${old_ifs}"
    rm "${cookiesFirstLogin}" 2> /dev/null

    return 0
}

login_CCT  --rawcookies
